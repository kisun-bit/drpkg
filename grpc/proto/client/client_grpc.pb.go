// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: grpc/proto/client/client.proto

package client

import (
	context "context"
	common "github.com/kisun-bit/drpkg/grpc/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientClient is the client API for Client service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientClient interface {
	Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.PingResponse, error)
	Command(ctx context.Context, in *common.CommandRequest, opts ...grpc.CallOption) (*common.CommandResponse, error)
	SystemInfo(ctx context.Context, in *common.SystemInfoRequest, opts ...grpc.CallOption) (*common.SystemInfoResponse, error)
	OpenFile(ctx context.Context, in *common.OpenFileRequest, opts ...grpc.CallOption) (*common.OpenFileResponse, error)
	ReadAt(ctx context.Context, in *common.ReadAtRequest, opts ...grpc.CallOption) (*common.ReadAtResponse, error)
	WriteAt(ctx context.Context, in *common.WriteAtRequest, opts ...grpc.CallOption) (*common.WriteAtResponse, error)
	GenericInvoke(ctx context.Context, in *common.FuncIn, opts ...grpc.CallOption) (*common.FuncOut, error)
}

type clientClient struct {
	cc grpc.ClientConnInterface
}

func NewClientClient(cc grpc.ClientConnInterface) ClientClient {
	return &clientClient{cc}
}

func (c *clientClient) Ping(ctx context.Context, in *common.PingRequest, opts ...grpc.CallOption) (*common.PingResponse, error) {
	out := new(common.PingResponse)
	err := c.cc.Invoke(ctx, "/client.Client/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) Command(ctx context.Context, in *common.CommandRequest, opts ...grpc.CallOption) (*common.CommandResponse, error) {
	out := new(common.CommandResponse)
	err := c.cc.Invoke(ctx, "/client.Client/Command", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) SystemInfo(ctx context.Context, in *common.SystemInfoRequest, opts ...grpc.CallOption) (*common.SystemInfoResponse, error) {
	out := new(common.SystemInfoResponse)
	err := c.cc.Invoke(ctx, "/client.Client/SystemInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) OpenFile(ctx context.Context, in *common.OpenFileRequest, opts ...grpc.CallOption) (*common.OpenFileResponse, error) {
	out := new(common.OpenFileResponse)
	err := c.cc.Invoke(ctx, "/client.Client/OpenFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) ReadAt(ctx context.Context, in *common.ReadAtRequest, opts ...grpc.CallOption) (*common.ReadAtResponse, error) {
	out := new(common.ReadAtResponse)
	err := c.cc.Invoke(ctx, "/client.Client/ReadAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) WriteAt(ctx context.Context, in *common.WriteAtRequest, opts ...grpc.CallOption) (*common.WriteAtResponse, error) {
	out := new(common.WriteAtResponse)
	err := c.cc.Invoke(ctx, "/client.Client/WriteAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) GenericInvoke(ctx context.Context, in *common.FuncIn, opts ...grpc.CallOption) (*common.FuncOut, error) {
	out := new(common.FuncOut)
	err := c.cc.Invoke(ctx, "/client.Client/GenericInvoke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServer is the server API for Client service.
// All implementations must embed UnimplementedClientServer
// for forward compatibility
type ClientServer interface {
	Ping(context.Context, *common.PingRequest) (*common.PingResponse, error)
	Command(context.Context, *common.CommandRequest) (*common.CommandResponse, error)
	SystemInfo(context.Context, *common.SystemInfoRequest) (*common.SystemInfoResponse, error)
	OpenFile(context.Context, *common.OpenFileRequest) (*common.OpenFileResponse, error)
	ReadAt(context.Context, *common.ReadAtRequest) (*common.ReadAtResponse, error)
	WriteAt(context.Context, *common.WriteAtRequest) (*common.WriteAtResponse, error)
	GenericInvoke(context.Context, *common.FuncIn) (*common.FuncOut, error)
	mustEmbedUnimplementedClientServer()
}

// UnimplementedClientServer must be embedded to have forward compatible implementations.
type UnimplementedClientServer struct {
}

func (UnimplementedClientServer) Ping(context.Context, *common.PingRequest) (*common.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedClientServer) Command(context.Context, *common.CommandRequest) (*common.CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Command not implemented")
}
func (UnimplementedClientServer) SystemInfo(context.Context, *common.SystemInfoRequest) (*common.SystemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemInfo not implemented")
}
func (UnimplementedClientServer) OpenFile(context.Context, *common.OpenFileRequest) (*common.OpenFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenFile not implemented")
}
func (UnimplementedClientServer) ReadAt(context.Context, *common.ReadAtRequest) (*common.ReadAtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAt not implemented")
}
func (UnimplementedClientServer) WriteAt(context.Context, *common.WriteAtRequest) (*common.WriteAtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteAt not implemented")
}
func (UnimplementedClientServer) GenericInvoke(context.Context, *common.FuncIn) (*common.FuncOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenericInvoke not implemented")
}
func (UnimplementedClientServer) mustEmbedUnimplementedClientServer() {}

// UnsafeClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServer will
// result in compilation errors.
type UnsafeClientServer interface {
	mustEmbedUnimplementedClientServer()
}

func RegisterClientServer(s grpc.ServiceRegistrar, srv ClientServer) {
	s.RegisterService(&Client_ServiceDesc, srv)
}

func _Client_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Client/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Ping(ctx, req.(*common.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_Command_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).Command(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Client/Command",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).Command(ctx, req.(*common.CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_SystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).SystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Client/SystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).SystemInfo(ctx, req.(*common.SystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_OpenFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.OpenFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).OpenFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Client/OpenFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).OpenFile(ctx, req.(*common.OpenFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_ReadAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ReadAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).ReadAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Client/ReadAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).ReadAt(ctx, req.(*common.ReadAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_WriteAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.WriteAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).WriteAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Client/WriteAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).WriteAt(ctx, req.(*common.WriteAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_GenericInvoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.FuncIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).GenericInvoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Client/GenericInvoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).GenericInvoke(ctx, req.(*common.FuncIn))
	}
	return interceptor(ctx, in, info, handler)
}

// Client_ServiceDesc is the grpc.ServiceDesc for Client service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Client_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "client.Client",
	HandlerType: (*ClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Client_Ping_Handler,
		},
		{
			MethodName: "Command",
			Handler:    _Client_Command_Handler,
		},
		{
			MethodName: "SystemInfo",
			Handler:    _Client_SystemInfo_Handler,
		},
		{
			MethodName: "OpenFile",
			Handler:    _Client_OpenFile_Handler,
		},
		{
			MethodName: "ReadAt",
			Handler:    _Client_ReadAt_Handler,
		},
		{
			MethodName: "WriteAt",
			Handler:    _Client_WriteAt_Handler,
		},
		{
			MethodName: "GenericInvoke",
			Handler:    _Client_GenericInvoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/client/client.proto",
}
